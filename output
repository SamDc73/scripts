#!/usr/bin/env bash

# Set strict error handling
set -euo pipefail

output_file="output.txt"
input_dir="."
copy_to_clipboard=false
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
PYTHON_COUNTER="${SCRIPT_DIR}/count_tokens.py"

# Function to copy to clipboard
copy_to_clip() {
    if command -v wl-copy >/dev/null 2>&1; then
        wl-copy
    elif command -v xclip >/dev/null 2>&1; then
        xclip -selection clipboard
    else
        echo "Neither wl-copy nor xclip found. Please install one of them for clipboard support."
        return 1
    fi
}

# Create Python counter script if it doesn't exist
if [[ ! -f "$PYTHON_COUNTER" ]]; then
    cat > "$PYTHON_COUNTER" << 'EOF'
#!/usr/bin/env python3
import tiktoken
import sys
import codecs

def count_tokens(text):
    try:
        enc = tiktoken.get_encoding("cl100k_base")
        tokens = enc.encode(text)
        return len(tokens)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 0

if __name__ == "__main__":
    sys.stdin = codecs.getreader('utf-8')(sys.stdin.buffer, errors='ignore')
    text = sys.stdin.read()
    print(count_tokens(text))
EOF
    chmod +x "$PYTHON_COUNTER"
fi

# Basic exclude patterns
exclude_patterns=(
    -not -path "*/\.git/*"
    -not -path "*/node_modules/*"
    -not -name "*.jpg"
    -not -name "*.png"
    -not -name "*.svg"
    -not -name "*.bin"
    -not -name "*.sqlite"
    -not -name "*.toml"
    -not -name ".gitignore"
    -not -name ".ds_store"
)

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -i|--input)
            shift
            input_dir="$1"
            shift
            ;;
        -o|--output)
            shift
            output_file="$1.txt"
            shift
            ;;
        -c|--clipboard)
            copy_to_clipboard=true
            shift
            ;;
        *)
            shift
            ;;
    esac
done

# Create temporary file for clipboard content
temp_file=$(mktemp)
trap 'rm -f "$temp_file"' EXIT

# Write tree structure
{
    echo "Directory Structure:"
    echo "==================="
    if command -v tree >/dev/null 2>&1; then
        tree "$input_dir"
    else
        find "$input_dir" -type d -print | sed -e "s;[^/]*/;|____;g;s;____|; |;g"
    fi
    echo
    echo "File Contents:"
    echo "============="
    echo
} | tee "$output_file" > "$temp_file"

# Initialize counters
total_tokens=0
copied_files=0

# Create a temporary file for batching
batch_file=$(mktemp)
trap 'rm -f "$batch_file" "$temp_file"' EXIT

# Process files in batches
while IFS= read -r -d '' file; do
    # Skip binary files and empty files
    if [[ ! -s "$file" ]] || file "$file" | grep -q "binary"; then
        continue
    fi

    # Process file content
    if [[ -f "$file" ]]; then
        content=$(cat "$file" | tr -d '\0' 2>/dev/null)

        if [[ -n "$content" ]]; then
            # Write content to output and temp files
            {
                echo "### $file ###"
                echo
                echo "$content"
                echo
                echo "--- End of file: $file ---"
                echo
            } | tee -a "$output_file" >> "$temp_file"

            # Accumulate content for batch processing
            batch_content+="$content"$'\n'
            batch_size=$((batch_size + ${#content}))
            ((copied_files++))

            # Process batch if it reaches threshold
            if ((batch_size >= BATCH_SIZE)); then
                current_tokens=$(echo "$batch_content" | "$PYTHON_COUNTER")
                total_tokens=$((total_tokens + current_tokens))
                batch_content=""
                batch_size=0
            fi
        fi
    fi
done < <(find "$input_dir" -type f "${exclude_patterns[@]}" -print0)



# Count tokens for entire batch at once
if [[ -n "$batch_content" ]]; then
    current_tokens=$(echo "$batch_content" | "$PYTHON_COUNTER")
    total_tokens=$((total_tokens + current_tokens))
fi

# Copy to clipboard if requested
if $copy_to_clipboard; then
    if cat "$temp_file" | copy_to_clip; then
        echo "Content copied to clipboard"
    fi
fi

echo "Output written to $output_file"
echo "Files processed: $copied_files"
echo "Total GPT tokens: $total_tokens"
